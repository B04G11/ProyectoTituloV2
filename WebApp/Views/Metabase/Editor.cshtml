@using System.Text.Json
@{
    ViewData["Title"] = "Editor";
    var metabaseIframeUrl = ViewBag.IframeUrl as string;
}
<h1>@ViewData["Title"]</h1>

<!-- Estilos y scripts principales -->
<link href="https://unpkg.com/grapesjs/dist/css/grapes.min.css" rel="stylesheet" />
<link href="https://unpkg.com/grapesjs-rulers/dist/grapesjs-rulers.min.css" rel="stylesheet">
<link href="https://unpkg.com/grapesjs-rte-extensions/dist/grapesjs-rte-extensions.min.css" rel="stylesheet">
<script src="https://unpkg.com/grapesjs"></script>
<script src="https://unpkg.com/grapesjs-blocks-basic"></script>
<script src="https://unpkg.com/grapesjs-rulers"></script>
<script src="https://unpkg.com/grapesjs-rte-extensions"></script>
<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="editor-buttons">
    <!-- Modal de Guardado -->
    <div id="guardarModal" class="modal">
        <h3>Guardar plantilla</h3>

        <div class="modal-group">
            <label for="selectSobrescribir">Selecciona plantilla para sobrescribir:</label><br />
            <select id="selectSobrescribir" class="select-csv"></select>
            <button type="button" id="btnSobrescribir" class="btn-add">Sobrescribir</button>
        </div>

        <div class="modal-group">
            <label for="inputNombreNueva">Nombre para nueva plantilla:</label><br />
            <input type="text" id="inputNombreNueva" class="input-csv" />
            <button type="button" id="btnCrearNueva" class="btn-add">Crear nueva</button>
        </div>

        <button type="button" class="btn-add danger" onclick="document.getElementById('guardarModal').style.display='none'">Cancelar</button>
    </div>


    <!-- Botón para abrir el modal de guardado -->
    <button type="button" id="saveTemplateBtn" class="btn-add">Guardar Plantilla</button>
    <!-- Botón para descargar PDF -->
    <button type ="button" id="descargarPdfBtn" class="btn-add">Descargar PDF de Plantilla</button>
    <!-- Selector y botón para cargar plantillas -->
    <label for="plantillasSelect" class="label-csv">Plantillas guardadas:</label>
    <select id="plantillasSelect" class="select-csv"></select>
    <button type="button" id="cargarPlantillaBtn" class="btn-add">Cargar plantilla</button>
    <button type="button" id="editarNombreBtn" class="btn-add">Editar nombre</button>
    <button type="button" id="eliminarPlantillaBtn" class="btn-add danger">Eliminar</button>

</div>

<!-- Editor de GrapesJS -->
<div id="gjs" class="editor-canvas"></div>

<script>
    // ------ VARS GLOBALES ------
    let editor;
    let plantillasDisponibles = [];
    let nombrePlantillaActual = null;

    // --- Inicialización del editor y bloques ---
    document.addEventListener('DOMContentLoaded', function () {
        var metabaseIframeUrl = @Html.Raw(JsonSerializer.Serialize(metabaseIframeUrl));
        editor = grapesjs.init({
            container: '#gjs',
            fromElement: true,
            storageManager: false,
            plugins: [
                'gjs-blocks-basic',
                'grapesjs-rulers',
                'grapesjs-rte-extensions'
            ]
        });

        editor.setStyle(`
            body, html { margin: 0; padding: 0; }
            .gjs-cv-canvas { padding: 0 !important; margin: 0 !important; }
            .pagina-a4 {
                width: 794px; height: 1123px; background: white;
                margin: 0 auto; box-shadow: 0 0 5px rgba(0,0,0,0.1);
                box-sizing: border-box; padding: 60px;
            }
            .pagina-a4 h1, .pagina-a4 h3, .pagina-a4 p { text-align: center; margin: 10px 0; }
        `);

        editor.BlockManager.add('a4-page', {
            label: 'Página A4',
            category: 'Estructura',
            content: `<div style="width:794px; height:1123px; max-width:794px; max-height:1123px; min-width:794px; min-height:1123px;
                    margin:auto; border:1px dashed #999; background:#fff; padding:20px; box-sizing:border-box;
                    display:flex; flex-direction:column; justify-content:flex-start; position:relative; overflow:hidden;">
                    <h3 style="text-align:center;">Página A4</h3>
                    <p>Contenido aquí...</p>
                </div>`
        });

        function getTodayDateTime() {
            const hoy = new Date();
            const dd = String(hoy.getDate()).padStart(2, '0');
            const mm = String(hoy.getMonth() + 1).padStart(2, '0');
            const yyyy = hoy.getFullYear();
            const hh = String(hoy.getHours()).padStart(2, '0');
            const min = String(hoy.getMinutes()).padStart(2, '0');
            const ss = String(hoy.getSeconds()).padStart(2, '0');
            return `${dd}/${mm}/${yyyy} ${hh}:${min}:${ss}`;
        }

        editor.BlockManager.add('portada-a4', {
            label: 'Portada A4',
            category: 'Estructura',
            content: `<div style="width:794px; height:1123px; max-width:794px; max-height:1123px; min-width:794px; min-height:1123px; margin:auto;
                        border:1px dashed #999; background:#fff; padding:20px; box-sizing:border-box; display:flex; flex-direction:column;
                        justify-content:flex-start; position:relative; overflow:hidden;">
                        <h1 style="text-align:center; margin-top:100px;">Título del Informe</h1>
                        <h3 style="text-align:center;">Subtítulo o descripción</h3>
                        <div style="flex:1;"></div>
                        <p>Autor: [Nombre]</p>
                        <p>Fecha y hora: ${getTodayDateTime()}</p>
                        <p>Empresa: [Nombre Empresa]</p>

                    </div>`
        });

        // Metabase blocks
            fetch('/Metabase/ObtenerUrlsGuardadas')
        .then(res => res.json())
        .then(urls => {
            // Muestra TODO el JSON recibido
            console.log('Respuesta completa de ObtenerUrlsGuardadas:', urls);
            urls.forEach((item, index) => {
                editor.BlockManager.add(`metabase-guardado-${index}`, {
                    label: `${item.Nombre} — ${item.Empresa}`,
                    content: `<iframe src="${item.Url}" width="100%" height="600" frameborder="0"></iframe>`,
                    category: 'Guardados Metabase'
                });
            });
        });


        // --- Select de plantillas guardadas al iniciar ---
        const nombreParam = getQueryParam('nombre');
        cargarListadoPlantillas(nombreParam);
        if (nombreParam) {
            setTimeout(() => {
                cargarPlantilla(nombreParam);
            }, 400); // Da tiempo para cargar el select
        }
       const pn = editor.Panels;
       const panelViews = pn.addPanel({
      id: "options"
    });
    panelViews.get("buttons").add([
      {
        active: 1,
        attributes: {
          title: "Toggle Rulers"
        },
        label: `<svg width="18" viewBox="0 0 16 16"><path d="M0 8a.5.5 0 0 1 .5-.5h15a.5.5 0 0 1 0 1H.5A.5.5 0 0 1 0 8z"/><path d="M4 3h8a1 1 0 0 1 1 1v2.5h1V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v2.5h1V4a1 1 0 0 1 1-1zM3 9.5H2V12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V9.5h-1V12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V9.5z"/></svg>`,
        command: "ruler-visibility",
        id: "ruler-visibility"
      }
    ]);

    editor.runCommand("ruler-visibility");
    });

    // ----------- FUNCIONES UTILIDAD -----------
    function getQueryParam(param) {
        const params = new URLSearchParams(window.location.search);
        return params.get(param);
    }

    function cargarListadoPlantillas(nombreSeleccionado = null) {
        fetch('/Metabase/ObtenerPlantillas')
            .then(res => res.json())
            .then(plantillas => {
                plantillasDisponibles = plantillas;
                const select = document.getElementById('plantillasSelect');
                select.innerHTML = "";
                let encontrada = false;
                plantillas.forEach(nombre => {
                    let option = document.createElement('option');
                    option.value = nombre;
                    option.textContent = nombre;
                    if (nombreSeleccionado && nombre === nombreSeleccionado) {
                        option.selected = true;
                        encontrada = true;
                    }
                    select.appendChild(option);
                });
                if (nombreSeleccionado && !encontrada) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Plantilla no existe',
                        text: `La plantilla '${nombreSeleccionado}' no existe.`
                    });
                }
            });
    }

function cargarPlantilla(nombre) {
    Swal.fire({
        title: 'Cargando plantilla...',
        text: 'Por favor espera',
        allowOutsideClick: false,
        allowEscapeKey: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });

    fetch('/Metabase/ObtenerPlantilla?nombre=' + encodeURIComponent(nombre))
        .then(res => {
            if (!res.ok) throw new Error('No encontrada');
            return res.json();
        })
        .then(data => {
            Swal.close(); // Cierra el loader

            if (!data.html && !data.css) {
                Swal.fire({
                    icon: 'info',
                    title: 'Sin contenido',
                    text: `La plantilla '${nombre}' no tiene contenido.`
                });
                return;
            }
            editor.setComponents(data.html);
            editor.setStyle(data.css);
            nombrePlantillaActual = nombre;
        })
        .catch(() => {
            Swal.close(); // Cierra el loader si hubo error
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: `No se pudo cargar la plantilla '${nombre}'.`
            });
        });
}



        function guardarPlantilla(nombre) {
        const html = editor.getHtml();
        const css = editor.getCss();
        const frame = document.querySelector('.gjs-frame');
        if (frame && frame.contentDocument && frame.contentDocument.body) {
            const body = frame.contentDocument.body;
            let a4div = body.querySelector('.a4-preview-capture');
            if (!a4div) {
                a4div = frame.contentDocument.createElement('div');
                a4div.className = 'a4-preview-capture';
                a4div.style.width = '794px';
                a4div.style.height = '1123px';
                a4div.style.overflow = 'hidden';
                a4div.style.position = 'relative';
                a4div.style.background = '#fff';
                a4div.innerHTML = body.innerHTML;
                body.appendChild(a4div);
            }
            Swal.fire({
                title: 'Guardando plantilla...',
                text: 'Por favor espera',
                allowOutsideClick: false,
                allowEscapeKey: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });
            html2canvas(a4div, {
                width: 794,
                height: 1123,
                ignoreElements: (element) => element.tagName === 'IFRAME'
            }).then(canvas => {
                const imagenBase64 = canvas.toDataURL('image/png');
                if (a4div) a4div.remove();
                fetch('/Metabase/GuardarPlantilla', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        contenido: html,
                        css: css,
                        nombre: nombre,
                        imagenBase64: imagenBase64
                    })
                }).then(async res => {
                    let respuesta = {};
                    try {
                        respuesta = await res.json();
                    } catch (e) {
                        // Si no es JSON válido, lo deja vacío
                    }

                    if (res.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: '¡Listo!',
                            text: respuesta.mensaje || ('Plantilla guardada como: ' + nombre),
                            timer: 1800,
                            showConfirmButton: true
                        });
                        cargarListadoPlantillas(nombre);
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: respuesta.mensaje || 'No se pudo guardar la plantilla.',
                            footer: respuesta.detalle ? `<pre style="text-align:left">${respuesta.detalle}</pre>` : undefined
                        });
                    }
                }).catch((err) => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error de red',
                        text: 'No se pudo guardar la plantilla.',
                        footer: `<pre style="text-align:left">${err}</pre>`
                    });
                });
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'No se encontró el canvas del editor.'
            });
        }
    }


    // ---------- EVENTOS BOTONES ----------

    // Abrir modal de guardado
    document.getElementById('saveTemplateBtn').addEventListener('click', function () {
        fetch('/Metabase/ObtenerPlantillas')
            .then(res => res.json())
            .then(data => {
                const select = document.getElementById('selectSobrescribir');
                select.innerHTML = "";
                data.forEach(nombre => {
                    const option = document.createElement('option');
                    option.value = nombre;
                    option.textContent = nombre;
                    select.appendChild(option);
                });
                if (nombrePlantillaActual && data.includes(nombrePlantillaActual)) {
                    select.value = nombrePlantillaActual;
                }
                document.getElementById('inputNombreNueva').value = '';
                document.getElementById('guardarModal').style.display = 'block';
            });
    });

    // Botón para sobrescribir plantilla existente
        // Botón para sobrescribir plantilla existente
    document.getElementById('btnSobrescribir').addEventListener('click', function () {
        const nombre = document.getElementById('selectSobrescribir').value;
        if (!nombre) {
            Swal.fire({
                icon: 'warning',
                title: 'Sin selección',
                text: "Selecciona una plantilla para sobrescribir."
            });
            return;
        }
        document.getElementById('guardarModal').style.display = 'none'; // <<--- CIERRA MODAL
        guardarPlantilla(nombre);
    });


    // Botón para crear plantilla nueva
        document.getElementById('btnCrearNueva').addEventListener('click', function () {
        let baseNombre = document.getElementById('inputNombreNueva').value.trim();
        if (!baseNombre) {
            Swal.fire({
                icon: 'warning',
                title: 'Falta el nombre',
                text: 'Ingresa un nombre para la nueva plantilla.'
            });
            return;
        }
        let nombreFinal = baseNombre;
        let contador = 1;
        while (plantillasDisponibles.includes(nombreFinal)) {
            nombreFinal = `${baseNombre}_${contador}`;
            contador++;
        }
        document.getElementById('guardarModal').style.display = 'none'; // <<--- CIERRA MODAL
        guardarPlantilla(nombreFinal);
    });

    // Botón para cargar plantilla seleccionada
    document.getElementById('cargarPlantillaBtn').addEventListener('click', function () {
        var select = document.getElementById('plantillasSelect');
        var nombre = select.value;
        if (!nombre) {
            Swal.fire({
                icon: 'warning',
                title: 'Sin selección',
                text: "Selecciona una plantilla."
            });
            return;
        }
        cargarPlantilla(nombre);
    });

    // Botón para descargar PDF de la plantilla seleccionada
    document.getElementById('descargarPdfBtn').addEventListener('click', function () {
        var select = document.getElementById('plantillasSelect');
        var nombre = select.value;
        if (!nombre) {
            Swal.fire({
                icon: 'warning',
                title: 'Sin selección',
                text: "Selecciona una plantilla para descargar el PDF"
            });
            return;
        }
        window.location.href = '/Metabase/DescargarPdf?nombre=' + encodeURIComponent(nombre);
    });
        // EDITAR NOMBRE
    document.getElementById('editarNombreBtn').addEventListener('click', function () {
        const select = document.getElementById('plantillasSelect');
        const nombreActual = select.value;
        if (!nombreActual) {
            Swal.fire({ icon: 'warning', title: 'Sin selección', text: 'Selecciona una plantilla.' });
            return;
        }
        Swal.fire({
            title: 'Editar nombre',
            input: 'text',
            inputLabel: 'Nuevo nombre de la plantilla',
            inputValue: nombreActual,
            showCancelButton: true,
            confirmButtonText: 'Renombrar',
            cancelButtonText: 'Cancelar',
            inputValidator: (value) => {
                if (!value) return 'Debes escribir un nombre';
                if (plantillasDisponibles.includes(value)) return 'Ya existe una plantilla con ese nombre';
            }
        }).then(result => {
            if (result.isConfirmed && result.value && result.value !== nombreActual) {
                fetch('/Metabase/RenombrarPlantilla', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ nombreActual: nombreActual, nuevoNombre: result.value })
                })
                .then(res => res.json().then(data => ({ ok: res.ok, data })))
                .then(resp => {
                    if (resp.ok) {
                        Swal.fire({ icon: 'success', title: 'Renombrada', text: resp.data.mensaje });
                        cargarListadoPlantillas(result.value);
                        nombrePlantillaActual = result.value;
                    } else {
                        Swal.fire({ icon: 'error', title: 'Error', text: resp.data.mensaje });
                    }
                })
                .catch(() => {
                    Swal.fire({ icon: 'error', title: 'Error', text: 'No se pudo renombrar la plantilla.' });
                });
            }
        });
    });

    // ELIMINAR PLANTILLA
    document.getElementById('eliminarPlantillaBtn').addEventListener('click', function () {
        const select = document.getElementById('plantillasSelect');
        const nombre = select.value;
        if (!nombre) {
            Swal.fire({ icon: 'warning', title: 'Sin selección', text: 'Selecciona una plantilla.' });
            return;
        }
        Swal.fire({
            title: `¿Eliminar "${nombre}"?`,
            text: "¡Esta acción no se puede deshacer!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Sí, eliminar',
            cancelButtonText: 'Cancelar'
        }).then(result => {
            if (result.isConfirmed) {
                fetch('/Metabase/EliminarPlantilla', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(nombre)
                })
                .then(res => res.json().then(data => ({ ok: res.ok, data })))
                .then(resp => {
                    if (resp.ok) {
                        Swal.fire({ icon: 'success', title: 'Eliminada', text: resp.data.mensaje });
                        cargarListadoPlantillas();
                        // Limpia editor si eliminó la actual
                        if (nombrePlantillaActual === nombre) {
                            editor.setComponents('');
                            editor.setStyle('');
                            nombrePlantillaActual = null;
                        }
                    } else {
                        Swal.fire({ icon: 'error', title: 'Error', text: resp.data.mensaje });
                    }
                })
                .catch(() => {
                    Swal.fire({ icon: 'error', title: 'Error', text: 'No se pudo eliminar la plantilla.' });
                });
            }
        });
    });

   
</script>