@using System.Text.Json
@{
    ViewData["Title"] = "Editor";
    var metabaseIframeUrl = ViewBag.IframeUrl as string;
}
<h1>@ViewData["Title"]</h1>

<link href="https://unpkg.com/grapesjs/dist/css/grapes.min.css" rel="stylesheet" />
<link href="https://unpkg.com/grapesjs-rulers/dist/grapesjs-rulers.min.css" rel="stylesheet">
<script src="https://unpkg.com/grapesjs-blocks-basic"></script>
<script src="https://unpkg.com/grapesjs-plugin-forms"></script>
<script src="https://unpkg.com/grapesjs-navbar"></script>
<script src="https://unpkg.com/grapesjs-component-countdown"></script>
<script src="https://unpkg.com/grapesjs-style-bg"></script>
<script src="https://unpkg.com/grapesjs-tooltip"></script>
<script src="https://unpkg.com/grapesjs-tui-image-editor"></script>
<script src="https://unpkg.com/grapesjs-custom-code"></script>
<script src="https://unpkg.com/grapesjs-touch"></script>
<script src="https://unpkg.com/grapesjs"></script>
<script src="https://unpkg.com/grapesjs-rulers"></script>

<div class="editor-buttons">
<div id="guardarModal" style="display:none; position:fixed; top:20%; left:50%; transform:translateX(-50%); background:white; padding:20px; border:1px solid #ccc; z-index:9999">
    <h3>Guardar plantilla</h3>

    <div style="margin-bottom:10px;">
        <label>Selecciona plantilla para sobrescribir:</label><br />
        <select id="selectSobrescribir"></select>
            <button id="btnSobrescribir" class="btn-add">Sobrescribir</button>
    </div>

    <div style="margin-bottom:10px;">
        <label>Nombre para nueva plantilla:</label><br />
        <input type="text" id="inputNombreNueva" />
            <button id="btnCrearNueva" class="btn-add">Crear nueva</button>
    </div>

    <button onclick="document.getElementById('guardarModal').style.display='none'">Cancelar</button>
</div>

<!-- Botón para descargar como PDF -->
    <button id="descargarPdfBtn" class="btn-add">Descargar PDF de Plantilla</button>
<script>
    document.getElementById('descargarPdfBtn').addEventListener('click', function () {
        var select = document.getElementById('plantillasSelect');
        var nombre = select.value;
        if (!nombre) {
            alert("Selecciona una plantilla para descargar el PDF");
            return;
        }
        window.location.href = '/Metabase/DescargarPdf?nombre=' + encodeURIComponent(nombre);
    });
</script>

    <button id="saveTemplateBtn" class="btn-add">Guardar Plantilla</button>
<script>
    let plantillasDisponibles = [];

    // Al hacer clic en "Guardar Plantilla", mostrar modal
    document.getElementById('saveTemplateBtn').addEventListener('click', function () {
        fetch('/Metabase/ObtenerPlantillas')
            .then(res => res.json())
            .then(data => {
                plantillasDisponibles = data;
                const select = document.getElementById('selectSobrescribir');
                select.innerHTML = "";
                data.forEach(nombre => {
                    const option = document.createElement('option');
                    option.value = nombre;
                    option.textContent = nombre;
                    select.appendChild(option);
                });

                document.getElementById('inputNombreNueva').value = '';
                document.getElementById('guardarModal').style.display = 'block';
            });
    });

    // Función para guardar plantilla
    function guardarPlantilla(nombre) {
        const html = editor.getHtml();
        const css = editor.getCss();

        fetch('/Metabase/GuardarPlantilla', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ contenido: html, css: css, nombre: nombre })
        }).then(res => {
            if (res.ok) {
                alert("Plantilla guardada como: " + nombre);
                document.getElementById('guardarModal').style.display = 'none';
                cargarListadoPlantillas(nombre); // refresca y selecciona
            } else {
                alert("Error al guardar");
            }
        });
    }

    // Botón Sobrescribir
    document.getElementById('btnSobrescribir').addEventListener('click', function () {
        const nombre = document.getElementById('selectSobrescribir').value;
        if (!nombre) return alert("Selecciona una plantilla");
        guardarPlantilla(nombre);
    });

    // Botón Crear nueva
    document.getElementById('btnCrearNueva').addEventListener('click', function () {
        let baseNombre = document.getElementById('inputNombreNueva').value.trim();
        if (!baseNombre) return alert("Ingresa un nombre");

        let nombreFinal = baseNombre;
        let contador = 1;
        while (plantillasDisponibles.includes(nombreFinal)) {
            nombreFinal = `${baseNombre}_${contador}`;
            contador++;
        }

        guardarPlantilla(nombreFinal);
    });
</script>


    <label for="plantillasSelect" class="label-csv">Plantillas guardadas:</label>
    <select id="plantillasSelect" class="select-csv"></select>
    <button id="cargarPlantillaBtn" class="btn-add">Cargar plantilla</button>
</div>

    <div id="gjs" class="editor-canvas"></div>


<script>
    var metabaseIframeUrl = @Html.Raw(JsonSerializer.Serialize(metabaseIframeUrl));
    console.log('metabaseIframeUrl:', metabaseIframeUrl);
      var editor = grapesjs.init({
      container: '#gjs',
      fromElement: true,
      storageManager: false,
      plugins: [
        'gjs-blocks-basic',
        'gjs-plugin-forms',
        'gjs-navbar',
        'gjs-component-countdown',
        'gjs-style-bg',
        'gjs-tooltip',
        'gjs-tui-image-editor',
        'gjs-custom-code',
        'gjs-touch',
        'grapesjs-rulers'
      ]
    });

        const pn = editor.Panels;
    const panelViews = pn.addPanel({
      id: 'options'
    });
    panelViews.get('buttons').add([{
      attributes: {
        title: 'Toggle Rulers'
      },
      context: 'toggle-rulers', //prevents rulers from being toggled when another views-panel button is clicked
      label: `<svg width="18" viewBox="0 0 16 16"><path d="M0 8a.5.5 0 0 1 .5-.5h15a.5.5 0 0 1 0 1H.5A.5.5 0 0 1 0 8z"/><path d="M4 3h8a1 1 0 0 1 1 1v2.5h1V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v2.5h1V4a1 1 0 0 1 1-1zM3 9.5H2V12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V9.5h-1V12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V9.5z"/></svg>`,
      command: 'ruler-visibility',
      id: 'ruler-visibility'
    }]);

        editor.setStyle(`
      body, html {
        margin: 0;
        padding: 0;
      }

      .gjs-cv-canvas {
        padding: 0 !important;
        margin: 0 !important;
      }

      .pagina-a4 {
        width: 794px;
        height: 1123px;
        background: white;
        margin: 0 auto;
        box-shadow: 0 0 5px rgba(0,0,0,0.1);
        box-sizing: border-box;
        padding: 60px;
      }

      .pagina-a4 h1, .pagina-a4 h3, .pagina-a4 p {
        text-align: center;
        margin: 10px 0;
      }
    `);


        editor.BlockManager.add('a4-page', {
      label: 'Página A4',
      category: 'Estructura',
      content: `
        <div style="width:794px; height:1123px; border:1px dashed #999; margin:auto; background:white; padding:20px;">
          <h3 style="text-align:center;">Página A4</h3>
          <p>Contenido aquí...</p>
        </div>
      `
    });
         editor.BlockManager.add('portada-a4', {
      label: 'Portada A4',
      category: 'Estructura',
      content: `
        <div class="pagina-a4">
          <h1>Título del Informe</h1>
          <h3>Subtítulo o descripción</h3>
          <div style="flex:1; height:400px;"></div>
          <p>Autor: [Nombre]</p>
          <p>Fecha: [DD/MM/AAAA]</p>
          <p>Empresa: [Nombre Empresa]</p>
        </div>
      `
    });
      editor.BlockManager.add('tabla-dinamica-con-bordes', {
    label: 'Tabla dinámica',
    category: 'Tablas',
    content: `
      <div style="font-family:Arial, sans-serif;">
        <div style="margin-bottom:10px;">
          <button onclick="agregarFila(this)" style="padding:5px 10px;">➕ Agregar Fila</button>
          <button onclick="agregarColumna(this)" style="padding:5px 10px;">➕ Agregar Columna</button>
        </div>

        <table border="1" style="width:100%; border-collapse:collapse;" class="tabla-editable">
          <thead>
            <tr>
              <th style="padding:8px;">Encabezado 1</th>
              <th style="padding:8px;">Encabezado 2</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style="padding:8px;">Dato 1</td>
              <td style="padding:8px;">Dato 2</td>
            </tr>
          </tbody>
        </table>

        <script>
          function agregarFila(btn) {
            const table = btn.closest('div').nextElementSibling;
            const tbody = table.querySelector('tbody');
            const columnas = table.querySelector('thead tr').children.length;
            const row = document.createElement('tr');
            for (let i = 0; i < columnas; i++) {
              const td = document.createElement('td');
              td.textContent = 'Dato';
              td.style.padding = '8px';
              row.appendChild(td);
            }
            tbody.appendChild(row);
          }

          function agregarColumna(btn) {
            const table = btn.closest('div').nextElementSibling;
            const thRow = table.querySelector('thead tr');
            const newTh = document.createElement('th');
            newTh.textContent = 'Encabezado';
            newTh.style.padding = '8px';
            thRow.appendChild(newTh);

            const rows = table.querySelectorAll('tbody tr');
            rows.forEach(row => {
              const td = document.createElement('td');
              td.textContent = 'Dato';
              td.style.padding = '8px';
              row.appendChild(td);
            });
       <script>
        </div>
        `
     });

    fetch('/Metabase/ObtenerUrlsGuardadas')
      .then(res => res.json())
      .then(urls => {
        urls.forEach((url, index) => {
          editor.BlockManager.add(`metabase-guardado-${index}`, {
            label: `Metabase #${index + 1}`,
            content: `<iframe src="${url}" width="100%" height="600" frameborder="0"></iframe>`,
            category: 'Guardados Metabase'
          });
        });
      })
      .catch(err => console.error("Error cargando URLs guardadas:", err));
    ;
</script>

<script>
    // 1. Listar plantillas
    function cargarListadoPlantillas(nombreSeleccionado = null) {
        fetch('/Metabase/ObtenerPlantillas')
            .then(res => res.json())
            .then(plantillas => {
                const select = document.getElementById('plantillasSelect');
                select.innerHTML = "";
                plantillas.forEach(nombre => {
                    let option = document.createElement('option');
                    option.value = nombre;
                    option.textContent = nombre;
                    if (nombreSeleccionado && nombre === nombreSeleccionado) {
                        option.selected = true;
                    }
                    select.appendChild(option);
                });
            });
    }

    // Carga inicial al cargar la página
    cargarListadoPlantillas();

    // 2. Cargar plantilla en GrapesJS
    document.getElementById('cargarPlantillaBtn').addEventListener('click', function () {
        var select = document.getElementById('plantillasSelect');
        var nombre = select.value;
        if (!nombre) {
            alert("Selecciona una plantilla");
            return;
        }
        cargarPlantilla(nombre);
    });
        function cargarPlantilla(nombre) {
        fetch('/Metabase/ObtenerPlantilla?nombre=' + encodeURIComponent(nombre))
            .then(res => res.json())
            .then(data => {
                editor.setComponents(data.html);
                editor.setStyle(data.css);
            });
    }
</script>
